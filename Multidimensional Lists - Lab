1.
rows,columns=list(map(int,input().split(', ')))
matrix=[]
the_sum=0



for i in range(rows):
    matrix.append(list(map(int,input().split(', '))))
    the_sum+=sum(matrix[-1])

print(the_sum)
print(matrix)



2.
row_count,col_count=list(map(int,input().split(', ')))
matrix=[]
total_sum=[]

for i in range(row_count):
    matrix.append(list(map(int,input().split(' '))))


for g in range(col_count):
    sum_col=0
    for j in range(row_count):
        sum_col+=matrix[j][g]
    total_sum.append(sum_col)

[print(sum) for sum in total_sum]



3.
def sum_diagonal():
    n=int(input())
    matrix=[]
    for i in range(n):
        matrix.append(list(map(int,input().split(' '))))

    sum_diagonal=0
    counter=0
    total_sum=0
    for g in range(n):
        total_sum+=matrix[g][g]


    return total_sum



print(sum_diagonal())



4.
def symbol_in_matrix():
    n=int(input())
    matrix=[]
    found=False
    for i in range(n):
        matrix.append([i for i in input()])

    symbol=input()
    for row in range(n):
        for col in range(n):
            if matrix[row][col]==symbol:
                return (f'({row}, {col})')
                found=True
                break



    if not found:
        return (f'{symbol} does not occur in the matrix')




print(symbol_in_matrix())



5.
def square_matrix_sum():
    row_count,col_count=list(map(int,input().split(', ')))
    matrix=[]
    for i in range(row_count):
        matrix.append(list(map(int,input().split(', '))))


    square_sums=[]
    max_sum=-99999999
    for row in range(row_count-1):
        for col in range(col_count-1):
            square_sum = 0
            square_sum+=matrix[row][col]+matrix[row][col+1]+matrix[row+1][col]+matrix[row+1][col+1]
            if square_sum>max_sum:
                max_sum=square_sum
                max_square=[
                    [matrix[row][col],matrix[row][col+1]],
                    [matrix[row+1][col],matrix[row+1][col+1]]
                ]



    [print(' '.join(map(str,row))) for row in max_square]
    print(max_sum)



square_matrix_sum()
